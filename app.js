'use strict';

var platform = require('./platform'),
	request = require('request').defaults({ encoding: null }),
	config = {};

/**
 * Emitted when device data is received.
 * @param {string} requestId The request id generated by the platform for this service request.
 * @param {object} data The data coming from the device represented as JSON Object.
 */
platform.on('data', function (requestId, data) {
	request.get(data[config.source], (err, response, body) => {
		if (err) {
			platform.handleException(err);
			platform.sendResult(requestId, null);
		}
		else if (response.statusCode === 200) {
			let contents = new Buffer(body).toString('base64');
			let result = {};

			result[config.result] = contents;

			platform.sendResult(requestId, JSON.stringify(result));

			platform.log(`${data[config.source]} processed successfully.`);
		}
	});
});

/**
 * Emitted when the platform shuts down the plugin. The Service should perform cleanup of the resources on this event.
 */
platform.once('close', function () {
	platform.notifyClose();
});

/**
 * Emitted when the platform bootstraps the plugin. The plugin should listen once and execute its init process.
 * Afterwards, platform.notifyReady() should be called to notify the platform that the init process is done.
 * @param {object} options The options or configuration injected by the platform to the plugin.
 */
platform.once('ready', function (options) {
	config.source = options.source || 'url';
	config.result = options.result || 'contents';

	platform.notifyReady();
	platform.log('Service has been initialized.');
});